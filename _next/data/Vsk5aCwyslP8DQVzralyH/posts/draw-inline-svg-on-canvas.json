{"pageProps":{"post":{"title":"How to draw an inline SVG on a canvas?","date":"March 28, 2020","content":"<p>For one of my projects, I needed to read pixel data from a dynamically drawn SVG, but I didn’t know how to transfer it to a canvas, which we first have to do before extracting pixel data.</p>\n<p>I’ll explain the method that I used, so, this is what we must have at the beginning:</p>\n<p>A <code>&lt;div></code> with an inline SVG. We have four rectangles lined-up.</p>\n<pre>\n  <code class='language-html'>\n&lt;div id=\"box-svg\">\n  &lt;svg id=\"svg\" style=\"position: relative; left: 0; width: 100%; height: 100%;\">\n    &lt;rect fill=\"rgb(136, 0, 68)\" width=\"25%\" height=\"100%\" x=\"0\" y=\"0\" />\n    &lt;rect fill=\"rgb(230, 0, 115)\" width=\"25%\" height=\"100%\" x=\"25%\" y=\"0\" />\n    &lt;rect fill=\"rgb(255, 91, 173)\" width=\"25%\" height=\"100%\" x=\"50%\" y=\"0\" />\n    &lt;rect fill=\"rgb(255, 183, 219)\" width=\"25%\" height=\"100%\" x=\"75%\" y=\"0\" />\n  &lt;/svg>\n&lt;/div>\n  </code>\n</pre>\n\n<p>Then we have a <code>&lt;div></code> with our canvas. This is where we will draw our SVG on.</p>\n<pre>\n  <code class='language-html'>\n&lt;div id=\"box-canvas\">\n  &lt;canvas id=\"canvas\">&lt;/canvas>\n&lt;/div>\n  </code>\n</pre>\n\n<p>The styles. Put them in the <code>&lt;head></code> section:</p>\n<pre>\n  <code class='language-css'>\nbody {\n  margin: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center\n}\n#box-svg, #box-canvas {\n  width: 90%;\n  height: 10%;\n}\ncanvas {\n  width: 100%;\n  height: 100%\n}\n  </code>\n</pre>\n\n<p>Now let’s start out. Throw in all the lines from this point forward inside a <code>&lt;script></code> tag with <code>type='text/javascript'</code> right before <code>&lt;/head></code>.</p>\n<p>First we pick up the canvas, and specify <code>width</code> and <code>height</code> for it:</p>\n<p>(Find out why we didn’t do this in our CSS at the end of the tutorial.)</p>\n<pre>\n  <code class='language-javascript'>\nlet canvas = document.getElementById('canvas')\n\ncanvas.width = document.getElementById('box-canvas').offsetWidth\ncanvas.height = document.getElementById('box-canvas').offsetHeight\n  </code>\n</pre>\n\n<p>Next, we call <code>getContext('2d')</code> which returns an object with all the methods and properties that we can use to draw on <code>canvas</code>.</p>\n<pre>\n  <code class='language-javascript'>\nlet context = canvas.getContext('2d')\n  </code>\n</pre>\n\n<p>Now, what we need to draw happens to be an inline SVG, but the problem is that the method we are supposed to use, <code>drawImage()</code> does not accept them!</p>\n<p>So, something that we can do is turning the inline SVG into a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\">data URL</a>:</p>\n<p>For that, first we use <code>XMLSerializer().serializeToString()</code> for a string which represents our SVG in XML form.</p>\n<pre>\n  <code class='language-javascript'>\nlet svgURL = new XMLSerializer().serializeToString(document.getElementById('svg'))\n  </code>\n</pre>\n\n<p>We then create an <code>&lt;img></code>,</p>\n<pre>\n  <code class='language-javascript'>\nlet img = document.createElement('img')\n  </code>\n</pre>\n\n<p>and then we can call <code>drawImage()</code> from <code>img.onload</code>, and specify the <code>src</code> for the <code>&lt;img></code> afterwards. Note that we have encoded the URL for the svg:</p>\n<pre>\n  <code class='language-javascript'>\nimg.onload = function(){\n  context.drawImage(img, 0,0)\n}\n\nimg.src = 'data:image/svg+xml; charset=utf8, ' + encodeURIComponent(svgURL)\n  </code>\n</pre>\n\n<p>And that’s it!</p>\n<p>You can find the complete code and the demo <a href=\"https://github.com/fazeelanizam13/blog2-draw-inline-svg-on-canvas\" target=\"_blank\">here</a> on GitHub.</p>\n<p>And learn in my next tutorial why we better not specify canvas dimensions in CSS.</p>\n"}},"__N_SSG":true}